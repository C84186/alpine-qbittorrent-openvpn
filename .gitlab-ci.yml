stages:
  - build

docker-build-master:
  # Official docker image.
  image: "docker:latest"
  stage: build
  services:
    - name: "docker:dind"
      command: ["--experimental"] # Enable experimental features in Docker server
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
    DOCKER_CLI_EXPERIMENTAL: enabled
    BUILDX_URL: https://github.com/docker/buildx/releases/latest/download/buildx-v0.4.1.linux-amd64
  before_script:
    # Enable experimental features in Docker client
    - mkdir -p $HOME/.docker/cli-plugins/
    - wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod a+x $HOME/.docker/cli-plugins/docker-buildx
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - docker buildx build --platform=linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6,linux/ppc64le -t ${CI_REGISTRY_USER}/alpine-qbittorrent-openvpn:latest --push .
# docker-build-master:
#   # Official docker image.
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker build --pull -t "$CI_REGISTRY_IMAGE" .
#     - docker push "$CI_REGISTRY_IMAGE"
#   only:
#     - master

# docker-build:
#   # Official docker image.
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
#     - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
#   except:
#     - master
