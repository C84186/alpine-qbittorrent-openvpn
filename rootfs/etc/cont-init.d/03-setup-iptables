#!/usr/bin/with-contenv sh

# extract docker network CIDR notation
DECTECTED_DOCKER_CIDR="$(ip -o -f inet addr show | awk '/scope global/ {print $4}')"

# fallback to DOCKER_CIDR if no DECTECTED_DOCKER_CIDR
DOCKER_CIDR="${DECTECTED_DOCKER_CIDR:-DOCKER_CIDR}"

# extract VPN protocol, host and port from configuration
CONFIG_PROTO=$(awk '/proto / { print $2 }' "${OPENVPN_CONFIG_FILE}")
CONFIG_PORT=$(awk '/remote / { print $3 }' "${OPENVPN_CONFIG_FILE}")
CONFIG_VPN_HOST=$(awk '/remote / { print $2 }' "${OPENVPN_CONFIG_FILE}")

VPN_PROTO="${CONFIG_PROTO:=udp}"
VPN_HOST="${CONFIG_VPN_HOST}"
VPN_PORT="${CONFIG_PORT:=1194}"

DNS_SERVER="${DNS}"

# Check that VPN information was sucessfully extracted from configuration

if [ -z "${VPN_HOST}" ]; then
    echo "ERROR could not find VPN_HOST in the VPN configuration"
    exit 1
fi

if [ -z "${VPN_PROTO}" ] || [ -z "${VPN_PORT}" ]; then
    echo "INFO: One of the following variables could not be detected in the VPN configuration, fell back to default:
    VPN_PROTO:  $VPN_PROTO
    VPN_HOST:   $VPN_HOST
    VPN_PORT:   $VPN_PORT
    "
fi

# change openvpn config 'tcp-client' to compatible iptables 'tcp'
if [ "${VPN_PROTO}" == "tcp-client" ]; then
    export VPN_PROTO="tcp"
fi

# reset iptables
iptables --flush
iptables --delete-chain
iptables -t nat --flush
iptables -t nat --delete-chain

# Set default policies to drop all communication unless specifically allowed
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

# allow localhost traffic
iptables -A INPUT -j ACCEPT -i lo
iptables -A OUTPUT -j ACCEPT -o lo

# allow DNS traffic outside VPN tunnel with given DNS resolver only on UDP and DNS port

# NOTE: these rules are dropped before starting qbittorrent
nft add rule ip filter OUTPUT ip protocol 17 ip daddr "${DNS_SERVER}" udp dport 53 ct state new,established counter accept
nft add rule ip filter INPUT ip protocol 17 ip saddr "${DNS_SERVER}" udp sport 53 ct state established counter accept
nft add rule ip filter OUTPUT ip protocol 6 ip daddr "${DNS_SERVER}" tcp dport 53 ct state new,established counter accept
nft add rule ip filter INPUT ip protocol 6 ip saddr "${DNS_SERVER}" tcp sport 53 ct state established counter accept

# allow LAN traffic
nft add rule ip filter INPUT iifname "eth*" ip saddr "${LAN}" counter accept
nft add rule ip filter OUTPUT oifname "eth*" ip daddr "${LAN}" counter accept

# allow traffic with other containers on docker network
nft add rule ip filter INPUT iifname "eth*" ip saddr "${DOCKER_CIDR}" counter accept
nft add rule ip filter OUTPUT oifname "eth*" ip daddr"${DOCKER_CIDR}" counter accept

# allow traffic with VPN host over VPN's port and with VPN's protocol
iptables -A OUTPUT -j ACCEPT -d "${VPN_HOST}" -o eth+ -p "${VPN_PROTO}" -m "${VPN_PROTO}" --dport "${VPN_PORT}"
iptables -A INPUT -j ACCEPT -s "${VPN_HOST}" -i eth+ -p "${VPN_PROTO}" -m "${VPN_PROTO}" --sport "${VPN_PORT}"

# allow traffic through VPN tunnel interface
iptables -A INPUT -j ACCEPT -i tun+
iptables -A OUTPUT -j ACCEPT -o tun+
